name: 2 - different inputs

<<<<<<< HEAD
on: 
    workflow_dispatch:
        inputs:
            MySQL:
                required: false
                type: boolean
            PostgreSQL:
                required: false
                type: boolean
                
jobs: 
    fetch-data:
        runs-on: ubuntu-latest
        steps:
          - name: MySQL fetch
            if: ${{ github.event.inputs.MySQL == 'true' }}
            run: echo "I will retrieve data from MySQL"
    
          - name: PostgreSQL fetch
            if: ${{ github.event.inputs.PostgreSQL == 'true' }}
            run: echo "I will retrieve data from PostgreSQL."
    
          - name: Done
            run: echo "You did it ðŸ˜Ž"
=======
on:
  workflow_dispatch:
>>>>>>> c1b9c4830779bf72039e2b235e955c76e1f654cc

jobs:
  fetch_data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install jq

      - name: Fetch data
        run: |
          TIMESTAMP=$(date +%s)
          OUTPUT_FILE="stage/${TIMESTAMP}.csv"
          mkdir -p stage
          curl -s -H "User-Agent: Chrome/123.0" https://www.sahamyab.com/guest/twiter/list?v=0.1 | jq '.items[] | [.id, .sendTime, .sendTimePersian, .senderName, .senderUsername, .type, .content] | join(",") ' > $OUTPUT_FILE
          echo "Data saved to $OUTPUT_FILE"

      - name: Commit and push changes
        run: |
          git config --local user.email "a.ghorbani.de@gmail.com"
          git config --local user.name "aa-ghorbani"
          git add stage/
          git commit -m "Fetch data at $(date)"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  send-to-bucket:
    runs-on: ubuntu-latest
    needs: fetch_data

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 
        
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

         
      - name: Run upload script
        run: |
          python send-to-object-storage.py

        env:
          ACCESS_KEY: ${{ secrets.S3_BUCKET_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.S3_BUCKET_SECRET_ACCESS_KEY }} 
